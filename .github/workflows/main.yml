name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Build Docker image
        id: build_image
        run: |
          docker build -t flask-app:latest . || { echo 'Docker image build failed'; exit 1; }
          echo "Docker image built successfully."

      - name: Save Docker image
        id: save_image
        run: |
          docker save -o flask-app.tar flask-app:latest || { echo 'Docker save failed'; exit 1; }
          echo "Docker image saved successfully."

      - name: Deploy to EC2
        if: steps.save_image.outcome == 'success'
        env:
          HOST: ${{ secrets.EC2_HOST }}
          USERNAME: ${{ secrets.EC2_USER }}
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          printf "%s" "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          echo "Connecting to EC2 instance..."
          scp -o StrictHostKeyChecking=no -i private_key.pem flask-app.tar ${USERNAME}@${HOST}:~/ || { echo 'File transfer failed'; exit 1; }
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${USERNAME}@${HOST} "
              echo 'Loading Docker image...' &&
              docker load -i flask-app.tar || { echo 'Docker load failed'; exit 1; } &&
              echo 'Starting Docker containers...' &&
              docker-compose up -d || { echo 'Docker compose up failed'; exit 1; }
          "
